package qwirkle.Desktop.View.InGame;

import javafx.animation.Timeline;
import javafx.animation.KeyFrame;
import javafx.animation.FadeTransition;
import javafx.beans.binding.Bindings;
import javafx.geometry.Pos;
import javafx.scene.Parent;

import javafx.scene.control.Label;
import javafx.scene.image.Image;

import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundImage;
import javafx.scene.layout.BackgroundPosition;
import javafx.scene.layout.BackgroundRepeat;
import javafx.scene.layout.BackgroundSize;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.util.Duration;
import qwirkle.Desktop.Game.Field;
import qwirkle.Desktop.Main.Mainstarter;
import qwirkle.Desktop.Resources.Resources;

/**
 * This class contains all elements of the game view. The grid on which the tiles will be placed 
 * is modelled by JavaFx GridPane.
 * This View contains the classes ControlBar, PlayerHand, PlayerAdapter, FieldView
 * 
 * @author Houman Mahtabi, Youssef Ameur
 *
 */
public class GameView extends Parent{

	public StackPane rootPane;
	public StackPane startWaitPane;
	public StackPane botLayer;
	private StackPane playField;
	private Field field;

	// Count down variables
	static final Integer startTime = 3;
	static Integer timeSeconds = startTime;
	public StackPane countDownPane;
	public Label countDownLabel;

	//	public SpectatorContainer spectators;
	public GridPane fieldGrid;
	public ControlBar controlBar;
	public ResultContainer results;
	public AllPlayersHandView allPlayersHandContainer;
	public PlayerAdapter playerAdapter; 
	public ChatView ChatView;

	private int fieldOrigin;
	private int fieldBounds;
	
	public Label lblGamePaused;

	public GameView(){

		getStylesheets().add(Resources.Css_InGame);

		// Board background
		Image imgBackground = new Image(Resources.GAMEBOARD_BACKGROUND_IMAGE);
		BackgroundSize bSize = new BackgroundSize(BackgroundSize.AUTO, BackgroundSize.AUTO, true, true, true, true);
		Background background1 = new Background(new BackgroundImage(imgBackground,
				BackgroundRepeat.NO_REPEAT,
				BackgroundRepeat.NO_REPEAT,
				BackgroundPosition.CENTER,
				bSize));

		// Messages about the game state	
		// Pause label, declaration
		Label pauseLbl = new Label("Game's Paused");
		pauseLbl.setVisible(false);
		pauseLbl.setId("Pause");

		// Player container
		playerAdapter = new PlayerAdapter();
		playerAdapter.setPrefWidth(250);
		playerAdapter.setId("playerAdapter");

		// Center domain of the gameView 
		// initializing the Field Grid and its container
		field = new Field();

		fieldGrid = new GridPane();
		fieldGrid.setHgap(1);
		fieldGrid.setVgap(1);
		fieldGrid.setId("field");

		playField = new StackPane();
		playField.setAlignment(Pos.CENTER);
		playField.getChildren().add(fieldGrid);
		playField.setId("fieldContainer");

		// Creating instance of zoomablePane to add Zoom function to the field
		ZoomablePane zoomablePane = new ZoomablePane(playField);
		zoomablePane.setId("scrollPane");

		// Ensure main table container has same size as zoomable ScrollPane
		playField
		.minWidthProperty()
		.bind(
				Bindings.createDoubleBinding(
						() -> zoomablePane.getViewportBounds().getWidth(),
						zoomablePane.viewportBoundsProperty()));
		playField
		.minHeightProperty()
		.bind(
				Bindings.createDoubleBinding(
						() -> zoomablePane.getViewportBounds().getHeight(),
						zoomablePane.viewportBoundsProperty()));

		// Container for the Field View 
		StackPane centerPane = new StackPane();
		centerPane.getChildren().addAll(zoomablePane); // + debugView


		///---------TESTING-----------///
//		Client client = new Client(1234, "Houman", ClientType.PLAYER);
//		Client client1 = new Client(1235, "Youssef", ClientType.PLAYER);
//		ArrayList<Client> clients = new ArrayList();
//		clients.add(client);
//		clients.add(client1);
//
//		this.allPlayersHandContainer = new AllPlayersHandView(clients);
//		this.allPlayersHandContainer.setMaxHeight(500);
//		this.allPlayersHandContainer.setMinHeight(500);
//		this.allPlayersHandContainer.setMaxWidth(750);
//		this.allPlayersHandContainer.setMinWidth(750);
//		this.allPlayersHandContainer.setTranslateX(1000);
//		this.allPlayersHandContainer.setTranslateY(-100);
//		//	    
//		centerPane.getChildren().add(this.allPlayersHandContainer);
//		centerPane.setAlignment(allPlayersHandContainer, Pos.BOTTOM_CENTER);

		///-------- END OF TEST ---------///

		//setup chatView
		ChatView = new ChatView();
		ChatView.setMaxHeight(200);
		ChatView.setMinHeight(200);
		ChatView.setMaxWidth(800);
		ChatView.setMinWidth(800);
		ChatView.setTranslateY(-165);
		// chat is schÃ¶n



		// StackPane 
		StackPane topPane = new StackPane();
		topPane.setAlignment(Pos.CENTER);
		topPane.getChildren().addAll(ChatView);
		topPane.prefWidthProperty().bind(Mainstarter.scene.widthProperty());
		topPane.setPickOnBounds(false);

		// Bottom part of this view 
		controlBar = new ControlBar();
		StackPane bottomPane = new StackPane();
		bottomPane.setAlignment(Pos.BOTTOM_CENTER);
		bottomPane.getChildren().addAll(controlBar);
		bottomPane.prefWidthProperty().bind(Mainstarter.scene.widthProperty());
		bottomPane.setPickOnBounds(false);

		// Container for the controlBar and playerHand 
		AnchorPane topLayer = new AnchorPane();
		topLayer.getChildren().addAll(bottomPane, topPane);
		topLayer.setPickOnBounds(false);
		AnchorPane.setBottomAnchor(bottomPane, 0.0);

		// Bottom Layer in which PlayerAdpater class and GameField will be modelled
		BorderPane botPane = new BorderPane();
		botPane.prefHeightProperty().bind(Mainstarter.scene.heightProperty());
		botPane.prefWidthProperty().bind(Mainstarter.scene.widthProperty());
		botPane.setBackground(background1);
		botPane.setCenter(centerPane);
		botPane.setLeft(playerAdapter);

		// Container for Field and playerAdapter
		botLayer = new StackPane();
		botLayer.prefHeightProperty().bind(Mainstarter.scene.heightProperty());
		botLayer.prefWidthProperty().bind(Mainstarter.scene.widthProperty());
		botLayer.getChildren().add(botPane);

		// Message that shows before game start
		startWaitPane = new StackPane();
		startWaitPane.setPickOnBounds(true);
		startWaitPane.setStyle("-fx-background-color: rgba(0, 0, 0, 0.3);");

		Label startWaitLabel = new Label("Waiting for the server to start the game...");
		startWaitLabel.setId("WaitMessage");

		VBox waitLabels = new VBox(10);
		waitLabels.getChildren().addAll(startWaitLabel);
		waitLabels.setAlignment(Pos.CENTER);

		startWaitPane.getChildren().add(waitLabels);

		// CountDown to game Start
		countDownPane = new StackPane();
		countDownPane.setPickOnBounds(true);
		countDownPane.setStyle("-fx-background-color: rgba(0, 0, 0, 0.3);");

		Label startIn = new Label("Game starts in... ");
		countDownLabel = new Label();
		startIn.setId("WaitMessage");
		countDownLabel.setId("WaitMessage");

		HBox countDownContainer = new HBox();
		countDownContainer.getChildren().addAll(startIn, countDownLabel);
		countDownContainer.setAlignment(Pos.CENTER);

		countDownPane.getChildren().add(countDownContainer);
		countDownPane.setVisible(false);

		// rootPane which contains all Elements of this view 
		rootPane = new StackPane();
		rootPane.getChildren().addAll(botLayer, topLayer); // +startWaitPane

		this.getChildren().add(rootPane);
	}


	public int getFieldOrigin() {
		return this.fieldOrigin;
	}

	public void setFieldOrigin(int fieldOrigin) {
		this.fieldOrigin = fieldOrigin;
	}

	public int getFieldBounds() {
		return this.fieldBounds;
	}
	
	public void setFieldBounds(int fieldBounds) {
		this.fieldBounds = fieldBounds;
	}
	
	
	//	public int getPlayerPoints(int id) {
	//		return playerAdapter.getPlayerPoints(id);
	//	}
	//
	//	public boolean setPlayerPoints(int id, int points) {
	//		return playerAdapter.setPlayerPoints(id, points);
	//	}

	public void setGameIsPaused(boolean paused) {
		this.lblGamePaused.setVisible(paused);
	}

	public void startCountDown(){

		FadeTransition cntDwnIn = new FadeTransition(Duration.millis(600), countDownLabel);
		cntDwnIn.setFromValue(0.0);
		cntDwnIn.setToValue(1.0);

		FadeTransition cntDwnOut = new FadeTransition(Duration.millis(400), countDownLabel);
		cntDwnOut.setFromValue(1.0);
		cntDwnOut.setToValue(0.0);

		countDownLabel.setText(timeSeconds.toString());
		Timeline timeline = new Timeline();
		timeline.setCycleCount(Timeline.INDEFINITE);
		timeline.getKeyFrames().add(
				new KeyFrame(Duration.seconds(1),
						event -> {
							timeSeconds--;
							// update timerLabel
							cntDwnIn.play();
							countDownLabel.setText(
									timeSeconds.toString());
							cntDwnOut.play();	
							if (timeSeconds == 0) {
								timeline.stop();
								botLayer.getChildren().remove(countDownPane);
							}
						}));
		timeline.playFromStart();

	}
}

