package qwirkle.Desktop.Controller;


import qwirkle.Desktop.Communication.Client;
import qwirkle.Desktop.Communication.Messages.gameMessages.*;
import qwirkle.Desktop.Game.Bag;
import qwirkle.Desktop.Game.Game;
import qwirkle.Desktop.entity.TileOnPosition;
import qwirkle.Desktop.Main.Mainstarter;
import qwirkle.Desktop.Resources.Resources;
//import qwirkle.Desktop.View.InGame.GridCells;
import qwirkle.Desktop.View.InGame.PlayerContainer;
import qwirkle.Desktop.entity.PlayerInGame;
import qwirkle.Desktop.enumeration.GameState;
import qwirkle.Desktop.enumeration.SoundEffects;
import qwirkle.Desktop.entity.Tile;
import javafx.application.Platform;
import javafx.scene.Parent;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Collection;

public class GameController extends Parent {

	private boolean messageInitializingWasShown = false;
	private static boolean playersSet = false;

	public static HashMap<Integer, Game> games;
	public static Game joinedGame;
	
	public static Client currentPlayer;
	
	// --- MODEL HANDLING ---

	public static void initiateGame(Game game){

		int tilesInGame = (int) (Math.pow(game.getConfig().getColorShapeCount(), 2) * game.getConfig().getTileCount());
		Mainstarter.gameView.setFieldOrigin(tilesInGame);
		Mainstarter.gameView.setFieldBounds(tilesInGame * 2);
		
		if (game.getGameState() == GameState.NOT_STARTED) {			
			int tilesInBagCount = game.getConfig().getTileCount() * (int) Math.pow(game.getConfig().getColorShapeCount(), 2);
			//			Platform.runLater(new Runnable() {
			//				@Override
			//				public void run() {
			Mainstarter.gameView.controlBar.setBagValue(tilesInBagCount);
			Mainstarter.gameView.controlBar.setTimeLeft(game.getConfig().getTurnTime());
			//				}
			//			});

			// set game bag 
			if (joinedGame.getBag() == null) {
				joinedGame.setBag(new Bag());
			}

			// Adding label that signals that the game has not started yet
			Mainstarter.gameView.botLayer.getChildren().add(Mainstarter.gameView.startWaitPane);
		}
		else if(game.getGameState() == GameState.IN_PROGRESS | game.getGameState() == GameState.PAUSED) {
			Mainstarter.meClient.sendMessage(new PlayerHandsRequest());
			Mainstarter.meClient.sendMessage(new GameDataRequest());
			Mainstarter.meClient.sendMessage(new BagRequest());
			Mainstarter.meClient.sendMessage(new TurnTimeLeftRequest());
			Mainstarter.meClient.sendMessage(new ScoreRequest());
			
		}
	}

	/**
	 * This method checks, if the model has been initialized with accurate values.<br>
	 * It will show a message box if not so.
	 *
	 * @param forceMessage Set to true, if you want to have shown message box when model is valid
	 * @return true if model is valid, false if not so
	 */
	public static boolean checkIfModelIsValid(boolean forceMessage) {
		boolean retval = true;
		String message = "";

		// Check if GameView has been instantiated
		if (Mainstarter.gameView == null) {
			retval = false;
			message += "GameView not instantiated...ERROR\n";
		} else {
			message += "GameView instantiated...OK\n";
		}

		// Check if deck has been set
		if (joinedGame.getAllBagTiles() != null) {
			if (joinedGame.getAllBagTiles().size() > 0) {
				message += "'deck[]' has been set...OK\n";
			}
		} else {
			retval = false;
			message += "'deck[]' has not been set...ERROR\n";
		}

		// Check if maxTiles has been set
		if (joinedGame.getBagSize() == 0) {
			retval = false;
			message +=
					"'maxTiles' has been set...ERROR (" + Integer.toString(joinedGame.getBagSize()) + ")\n";
		} else {
			message += "'maxTiles' has been set...OK (" + Integer.toString(joinedGame.getBagSize()) + ")\n";
		}

		// Check if players has been set
		if (joinedGame.getPlayers() != null) {
			if (joinedGame.getPlayers().size() > 0) {
				message += "'players[]' has been set...OK\n";
			}
		} else {
			// retval = false;
			message += "'players[]' has not been set...WARNING\n";
		}

		// Check if maxPlayers is in the allowed range
		if ((joinedGame.getConfig().getMaxPlayerNumber() >= 1) && (joinedGame.getConfig().getMaxPlayerNumber() <= 5)) {
			message +=
					"'maxPlayers' is in the allowed range...OK ("
							+ Integer.toString(joinedGame.getConfig().getMaxPlayerNumber())
							+ ")\n";
		} else {
			retval = false;
			message +=
					"'maxPlayers' is not in the allowed range...ERROR ("
							+ Integer.toString(joinedGame.getConfig().getMaxPlayerNumber())
							+ ")\n";
		}
		return retval;
	}

	/**
	 * This method tells the GameView to place the start tile to the middle of the game field.<br>
	 * Will be forwarded to -> GameView -> GridElement.
	 *
	 * @return true, if the start tile was successfully set / false, if not so
	 */
//	public static boolean setStartTile() {
//		return setTile(fieldOrigin, fieldOrigin, -1);
//	}

	/**
	 * Set StartHand for Players
	 * 
	 * @param myTiles
	 * @return
	 */
//	public static boolean setStartHand(ArrayList<Tile> myTiles) {
//
//		Mainstarter.gameView.playerHand.imageList.getItems().clear();
//
//		for (Tile tile : myTiles) {
//			Mainstarter.gameView.playerHand.handList.add(tile);
//			Image tileImage = new Image(Resources.getTileImage(tile.getUniqueID()));
//			ImageView tileView = new ImageView(tileImage);
//			tileView.setFitHeight(80);
//			tileView.setFitWidth(80);
//		}
//		Mainstarter.gameView.playerHand.addTileView(myTiles);
//		return true;
//	}

	/**
	 * Here the Hand that was dealt to each player will be set
	 * @param playersHands
	 */
	public static void setPlayerHands(Map<Client, Collection<Tile>> playersHands) {
		for(Client player : playersHands.keySet()) {
			if(!playersSet) {
				joinedGame.players.add(player);
			}
			if (joinedGame.playerHands == null) {
				joinedGame.playerHands = new HashMap<Client, Collection<Tile>>();
				joinedGame.playerHands.put(player, playersHands.get(player));				
			}else {
				joinedGame.playerHands.put(player, playersHands.get(player));
			}
			Platform.runLater(new Runnable() {
				@Override
				public void run() {
					// TODO Auto-generated method stub
					PlayerInGame plInGame = new PlayerInGame(player
							, (ArrayList<Tile>) joinedGame.playerHands.get(player)
							, 0
							, false);
					Mainstarter.gameView.playerAdapter.players.add(new PlayerContainer(plInGame));
				}				
			});
		}
		playersSet = true;
	}	

	/**
	 * This method tells the GameView to add a player/spectator to the game.<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> PlayerRibbon (constructor)<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> SpectatorsRibbon<br>
	 *
	 * @param id The ID of the player, who has to be added
	 * @param name The name of the player, who has to be added
	 * @param type The type of the player, who has to be added
	 * @return true, if player was successfully added to GameView / false, if not so
	 */
	public static boolean addPlayer(Client client) {
		boolean retval = false;
		switch (client.getClientType()) {
		case PLAYER: // not implemented yet
			joinedGame.getPlayers().add(client);
			break;
		case ENGINE_PLAYER: // Add AI-player
			// retval = Mainstarter.model.getGameView().playerAdapter.addPlayer(client);
			break;
		case SPECTATOR: // Add Spectator
			break;
		default: // Wrong player type
			retval = false;
			break;
		}
		return retval;
	}

	/**
	 * this method sets each player score
	 * @param scores
	 */
	public static void setScores(Map<Client, Integer> scores) {
		for (Client player : scores.keySet()) {
			if (joinedGame.playersScores == null) {
				joinedGame.playersScores = new HashMap<Client, Integer>();
				joinedGame.playersScores.put(player, scores.get(player));
			}else {
				joinedGame.playersScores.put(player, scores.get(player));
			}
	
			Platform.runLater(new Runnable() {
				@Override
				public void run() {
					for(PlayerContainer plCon : Mainstarter.gameView.playerAdapter.players) {
						if (plCon.getPlayerInGame().getPlayer().getClientId() ==
								player.getClientId()) {
							plCon.lblPlayerPoints.setText(Integer.toString(scores.get(player)));
						}
					}
				}				
			});
		}
	}
	
	/**
	 * This method tells the GameView to remove a player/spectator from the game.<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> PlayerRibbon (set to null)<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> SpectatorsRibbon<br>
	 *
	 * @param id The ID of the player who has to be removed
	 * @return true, if player was successfully removed from GameView / false, if not so
	 */
	public static boolean removePlayer(int id) {
		for (Client cl : joinedGame.getClients()) {
			if (cl.getClientId() == id) {
				joinedGame.getClients().remove(cl);
				return true;
			}
		}
		return false;
	}

	/**
	 * This method tells the GameView to remove a spectator from the game.<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> SpectatorsRibbon.<br>
	 * Only for DEBUGGING and TESTING purposes. It is RECOMMENDED to do this by calling the method
	 * removePlayer(). (Spectators are players with playerType=1.)<br>
	 *
	 * @param id The ID of the spectator, who has to be removed
	 * @return true, if spectator was successfully removed from GameView / false, if not so
	 */
//	public static boolean removeSpectator(int id) {
//		for (Client cl : joinedGame.getClients()){
//			if (cl.getClientId() == id){
//				return joinedGame.getSpectators().remove(cl);
//			}
//		}
//		return false;
//	}

	
	// --- View Management ---

	public static void callSettings () {
		BorderPane tmpPane = Mainstarter.settingsView.setsContainer;
		tmpPane.getStylesheets().add(Resources.Css_InGame);

		if(!Mainstarter.gameView.rootPane.getChildren().contains(tmpPane)) {
			Mainstarter.gameView.rootPane.getChildren().add(tmpPane);
		}else {
			Mainstarter.gameView.rootPane.getChildren().remove(tmpPane);
		}
	}
	
	public static void setCurrentPlayer(Client player) {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				if (currentPlayer != null) {
					for(PlayerContainer plCon : Mainstarter.gameView.playerAdapter.players) {
						if (plCon.getPlayerInGame().getPlayer().getClientId()
								== player.getClientId()){
							plCon.infoBox.setBackground(plCon.Active);
							plCon.playerHand.setBackground(plCon.Active);
						}else if (plCon.getPlayerInGame().getPlayer().getClientId() ==
								currentPlayer.getClientId()) {
							plCon.infoBox.setBackground(plCon.deActive);
							plCon.playerHand.setBackground(plCon.deActive);
						}
					}
					currentPlayer = player;
				}else {
					currentPlayer = player;
					for(PlayerContainer plCon : Mainstarter.gameView.playerAdapter.players) {
						if (plCon.getPlayerInGame().getPlayer().getClientId()
								== player.getClientId()){
							plCon.infoBox.setBackground(plCon.Active);
							plCon.playerHand.setBackground(plCon.Active);
						}
					}
				}
			}
		});

		
	}

	/**
	 * This method gets the score for a specific player.<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> PlayerRibbon.
	 *
	 * @param id The ID of the player to get the score from
	 * @return The player's score
	 */
//	public static int getPlayerPoints(int id) {
//		return Mainstarter.gameView.getPlayerPoints(id);
//	}

	/**
	 * This method sets the score for a specific player.<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> PlayerRibbon.<br>
	 *
	 * @param id The ID of the player to set the score
	 * @param score The player's score which has to be set
	 * @return true, if the score was successfully set / false, if not so
	 */
//	public static boolean setPlayerPoints(int id, int score) {
//		return Mainstarter.gameView.setPlayerPoints(id, score);
//	}

	/**
	 * This method asks the GameView, if a specific Player is shown in the GameView.<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> PlayerRibbon.<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> SpectatorsRibbon.
	 *
	 * @param id The ID of the player to look for
	 * @param name The name of the player to look for
	 * @return true if player found in GameView, false if not so
	 */
//	public static boolean playerIsInGame(int id, String name) {
//		return Mainstarter.gameView.playerAdapter.playerIsInGame(id, name);
//	}

	/**
	 * This method generates an ArrayList with all players currently displayed in GameView. Will be
	 * forwarded to -> GameView -> PlayerContainer -> PlayerRibbon.<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> SpectatorsRibbon.
	 *
	 * @return true if successful, false if not so
	 */
//	public static ArrayList<Player> getAllPlayers() {
//		return Mainstarter.gameView.playerAdapter.getAllPlayers();
//	}

	/**
	 * This method will check if players/spectators have been added/removed and add/remove them
	 * accordingly.<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> PlayerRibbon<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> SpectatorsRibbon<br>
	 *
	 * @return true if successful, false if not so
	 */
//	public static boolean updatePlayersFromModel() {
//		try {
//			// Check if players/spectators have been removed
//			boolean foundinModel = false;
//			ArrayList<Player> playersView = getAllPlayers();
//			for (Iterator<Player> itView = playersView.iterator(); itView.hasNext(); ) {
//				foundinModel = false;
//				Player nextPlayer = itView.next();
//				for (Client playersModel : joinedGame.getPlayers()) {
//					if ((playersModel.getClientId() == nextPlayer.getClientID())
//							&& (playersModel.getClientName().compareTo(nextPlayer.getClientName()) == 0)) {
//						foundinModel = true;
//						break;
//					}
//				}
//			}
//			// Check if players/spectators have been added
//			for (Client playersModel : joinedGame.getPlayers()) {
//				if (playerIsInGame(playersModel.getClientId(), playersModel.getClientName()) == false) {
//					addPlayer(
//							playersModel);
//				}
//			}
//			// Update player's score has changed
//			for (Client playersModel : joinedGame.getPlayers()) {
//				// Give Player points (do not so to spectators)
//				if (playersModel.getClientType() != null) {
//					//Mainstarter.model
//					//.getGameView()
//					//.setPlayerPoints(playersModel.getClientID(), playersModel.getPoints());
//				}
//			}
//			return true;
//		} catch (java.lang.NullPointerException exc) {
//
//			return false;
//		} catch (Exception exc) {
//			return false;
//		}
//	}

	/**
	 * This method will remove all players from GameView.
	 *
	 * @return true if successful / false if not so
	 */
//	public static boolean removeAllPlayers() {
//		// Remove all Players from View
//		ArrayList<Player> playersView = getAllPlayers();
//		for (Iterator<Player> itView = playersView.iterator(); itView.hasNext(); ) {
//			Player nextPlayer = itView.next();
//			removePlayer(nextPlayer.getClientID());
//		}
//		return true;
//	}
	
	
	// --- Controlbar Handling ---

	public static void updateBag() {
		Platform.runLater(new Runnable(){
			@Override
			public void run() {
				Mainstarter.gameView.controlBar.setBagValue(joinedGame.getBagSize());
			}
		});
	}

	public static void updateTimeLeft(TurnTimeLeftResponse turnTime) {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				Mainstarter.gameView.controlBar.setTimeLeft(turnTime.getTime());
				Mainstarter.gameView.controlBar.startTimer();
			}
		});
	}

	// --- Field Handling ---

	public boolean getMessageInitializingWasShown() {
		return messageInitializingWasShown;
	}
	
	public void setMessageInitializingWasShown(boolean messageInitializingWasShown) {
		this.messageInitializingWasShown = messageInitializingWasShown;
	}

	/**
	 * Setting the tiles that are placed on the board
	 * @param onBoard
	 */
	public static void setBoard(Collection<TileOnPosition> onBoard){
		
		for (TileOnPosition tile : onBoard) {
			Image tileImage = new Image(Resources.getTileImage(tile.getTile().getUniqueID()));
			ImageView tileView = new ImageView(tileImage);
			Platform.runLater(new Runnable() {
				@Override
				public void run() {
					System.out.println("GETXXXXXXXX  " + tile.getX());
					int x = ((tile.getX()<0)? tile.getX() + Mainstarter.gameView.getFieldOrigin() : tile.getX()); 
					System.out.println("AAAAAAAAAAAAAAAAAAAAAAAA");
					System.out.println(x);
					int y = ((tile.getY()<0)? tile.getY() + Mainstarter.gameView.getFieldOrigin() : tile.getY()); 
					Mainstarter.gameView.fieldGrid.add(tileView, x, y);	
				}
			});
		}
	}

	public static void update(Collection<TileOnPosition> setTiles, int tileInBag) {
		
		Platform.runLater(new Runnable(){
			@Override
			public void run() {
				Mainstarter.gameView.controlBar.setBagValue(tileInBag);

				for (TileOnPosition tile : setTiles) {
					Image tileImage = new Image(Resources.getTileImage(tile.getTile().getUniqueID()));
					ImageView tileView = new ImageView(tileImage);
					int x = ((tile.getX()<0)? tile.getX() + Mainstarter.gameView.getFieldOrigin() : tile.getX()); 
					int y = ((tile.getY()<0)? tile.getY() + Mainstarter.gameView.getFieldOrigin() : tile.getY());
					
//					Mainstarter.gameView.fieldGrid.getChildren().add;
					Mainstarter.gameView.fieldGrid.add(tileView, x, y);
//					Mainstarter.gameView.pla
				}
			}
		});
	}
	
	
	
	// --- TILE HANDLING ---

	/**
	 * This method tells the GameView to place a tile to the game field.<br>
	 * Will be forwarded to -> GameView -> GridElement (Constructor)
	 *
	 * @param posX The internal x-coordinate
	 * @param posY The internal y-coordinate
	 * @param playerId The ID of the player who places the tile
	 * @param tileId The ID of the tile which has to be placed
	 * @param rotation The rotation of the tile
	 * @return true, if the tile was successfully set / false, if not so
	 */
//	public static boolean setTile(int posX, int posY, int playerId) {
//		boolean retval = false;
//		try {
//
//			if (Mainstarter.gameView.gridCells[posX][posY]
//					== null) { // Check if node with these coordinates already exists
//				Mainstarter.gameView.gridCells[posX][posY] =
//						new GridCells(Mainstarter.gameView, posX, posY); // create node
//			}
//
//			// Check, if cell has already child node
//			Node result = null;
//			ObservableList<Node> childrens = Mainstarter.gameView.fieldGrid.getChildren();
//			for (Node node : childrens) {
//				if ((GridPane.getRowIndex(node) == posY) && (GridPane.getColumnIndex(node) == posX)) {
//					result = node;
//					break;
//				}
//			}
//			if (result == null) { // Nothing in the specific cell
//				Mainstarter.gameView.fieldGrid.add(Mainstarter.gameView.gridCells[posX][posY], posX, posY);
//			}
//			return retval;
//
//		} catch (java.lang.NullPointerException exc) {
//			return false;
//		} catch (Exception exc) {
//			return false;
//		}
//	}

	/**
	 * This method tells the GameView to remove a tile from the game field.<br>
	 * Will be forwarded to -> GameView -> GridElement.
	 *
	 * @param posX The internal x-coordinate
	 * @param posY The internal y-coordinate
	 * @return true, if the tile was successfully removed / false, if not so
	 */
/*	public static boolean removeTile(int posX, int posY) {
		try {
			if (Mainstarter.gameView.gridCells[posX][posY]
					== null) { // nothing there, so nothing to remove
				return false;
			} else {
				Mainstarter.gameView.gridCells[posX][posY].removeTile();
				Mainstarter.gameView.gridCells[posX][posY].removeHighlight();
				Mainstarter.gameView
				.fieldGrid
				.getChildren()
				.remove(Mainstarter.gameView.gridCells[posX][posY]);
				return true;
			}
		} catch (java.lang.NullPointerException exc) {
			return false;
		} catch (Exception exc) {
			return false;
		}
	}
*/
	/**
	 * This method tells the GameView to remove all tiles from the game field.<br>
	 * Will be forwarded to -> GameView -> GridElement.
	 *
	 * @return true, if the board was successfully cleared / false, if not so
	 */
//	public static boolean clearBoard() {
//		try {
//			List<Node> nodesToRemove = new ArrayList<Node>(); // nodes to remove from mainTable
//			for (Node node : Mainstarter.gameView.fieldGrid.getChildren()) {
//				nodesToRemove.add(node);
//				int posX = GridPane.getColumnIndex(node);
//				int posY = GridPane.getRowIndex(node);
//				if (Mainstarter.gameView.gridCells[posX][posY] != null) { // something there, so remove
//					Mainstarter.gameView.gridCells[posX][posY].removeTile();
//					Mainstarter.gameView.gridCells[posX][posY].removeHighlight();
//				}
//			}
//			Mainstarter.gameView.fieldGrid.getChildren().removeAll(nodesToRemove);
//			// model.getGameView().setGridSize(model.getMaxTiles());
//			return true;
//		} catch (Exception exc) {
//			return false;
//		}
//	}


	
	// --- Chat Management ---
	/**
	 * Method for showing client Messages
	 * @param msg
	 * @param from
	 */
	public static void showPlayerMessage(String msg, Client from) {
		Platform.runLater(new Runnable() {
			public void run() {
				//			Mainstarter.gameView.ChatView.chatMessages.add(from.getClientName() + ": "+ msg);
				//			Mainstarter.gameView.ChatView.addMessage(from.getClientName() + ": "+ msg);
				Mainstarter.gameView.ChatView.addMessage(msg);

			}
		});

	}


	// --- GAME FLOW HANDLING ---

	/**
	 * values and calculate the maximum size of the grid in the GameView from the server-submitted
	 * deck.<br>
	 * Will be forwarded to -> GameView.<br>
	 * Will be forwarded to -> GameView -> ControlSidebar.<br>
	 * Will be forwarded to -> GameView -> DeckSlide.
	 *
	 * @param forceStart Set to true if game should also start with an inaccurate model
	 * @param showValidModel Set to true, if you want to have shown message box when model is valid
	 */
	public static void startGame() {

		Mainstarter.meClient.sendMessage(new PlayerHandsRequest());

		if (Mainstarter.gameView.botLayer.getChildren().contains(Mainstarter.gameView.startWaitPane)){
			Mainstarter.gameView.startWaitPane.setVisible(false);
		}

		// Clear Board
//		clearBoard();

		Platform.runLater(new Runnable(){
			@Override
			public void run() {
				if (!Mainstarter.gameView.botLayer.getChildren().contains(Mainstarter.gameView.countDownPane)){
					Mainstarter.gameView.countDownPane.setVisible(true);
					Mainstarter.gameView.botLayer.getChildren().add(Mainstarter.gameView.countDownPane);
				}
			}
		});
		Mainstarter.gameView.startCountDown();


		//set start tile 
		//		setTile(origin + i, origin + j, playerId);
		//		Mainstarter.model.getGameView().mainTable.add(tileImage, origin+i, origin+j);

		// Update Time Left (Server uses Milliseconds)
		//		Mainstarter.gameView.controlBar.setTimeLeft(joinedGame.getConfig().getTurnTime());


		// Play Start Sound
		SoundEffects.BUTTON_CLICK.play(Mainstarter.model.getSoundVol());
	}

	/**
	 * This method tells the GameView to signal that one player has to make a turn right now. It will
	 * also start the countdown.<br>
	 * Will be forwarded to -> GameView -> ControlSidebar<br>
	 * Will be forwarded to -> GameView -> PlayerContainer -> PlayerRibbon
	 *
	 * @param id The ID of the player who has to make turn
	 * @param type The type of the player who has to make turn
	 * @return true, if successful / false, if not so
	 */
//	public static boolean startTurn(int id) {
//		SoundEffects.BUTTON_CLICK.play(Mainstarter.model.getSoundVol());
//		Mainstarter.gameView.playerAdapter.setPlayerTurn(id, true);
//		return Mainstarter.gameView.controlBar.startTurn();
//	}

	/**
	 * This method tells the GameView to signal that one player has finished a turn. It will also stop
	 * the countdown.<br>
	 * Will be forwarded to -> GameView -> ControlSidebar<br>
	 * Will be forwarded to to -> GameView -> PlayerContainer -> PlayerRibbon<br>
	 *
	 * @return true, if successful / false, if not so
	 */
//	public static boolean stopTurn() {
//		Mainstarter.gameView.playerAdapter.setAllPlayerTurnsFalse();
//		return Mainstarter.gameView.controlBar.stopTurn();
//	}


	/**
	 * This method will pause the game. It will also interrupt the countdown if one player is just
	 * making a turn.<br>
	 * Will be forwarded to -> GameView -> ControlBar
	 *
	 * @return true, if successful / false, if not so
	 */
	public static boolean pauseGame() {
		Mainstarter.gameView.setGameIsPaused(true);
		return Mainstarter.gameView.controlBar.pauseGame();
	}

	/**
	 * This method will resume the game. It will also continue the countdown if one player is just
	 * making a turn.<br>
	 * Will be forwarded to -> GameView -> ControlSidebar<br>
	 *
	 * @return true, if successful / false, if not so
	 */
	public static boolean resumeGame() {
		Mainstarter.gameView.setGameIsPaused(false);
		return Mainstarter.gameView.controlBar.resumeGame();
	}

	/** This method will exit the game. */
	//	public void exitGame() {
	//	    control.exitGame();
	//	  }
	//
	//	  public void reallyExitGame() {
	//	    control.reallyExitGame();
	//	  }

	// --- OTHER ---

	/** This method will switch to the settings menu. */
	//	public void settings() {
	//	    mainMenuController.openSettings(model.getGameView().scene, model);
	//	  }

	// --- GETTERS & SETTERS ---

	//	  public GameController getControl() {
	//	    return control;
	//	  }
}

