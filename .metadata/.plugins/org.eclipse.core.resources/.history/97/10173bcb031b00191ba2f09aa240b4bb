package qwirkle.Desktop.Communication.MessageHandlers;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import javafx.application.Platform;
import qwirkle.Desktop.Communication.Messages.messages_from_server.*;
import qwirkle.Desktop.Controller.GameController;
import qwirkle.Desktop.Controller.MainMenuController;
import qwirkle.Desktop.Controller.SelectGameController;
import qwirkle.Desktop.Game.Bag;
import qwirkle.Desktop.Main.Mainstarter;
import qwirkle.Desktop.entity.Tile;
import qwirkle.Desktop.entity.TileOnPosition;
import qwirkle.Desktop.enumeration.ClientType;
import qwirkle.Desktop.Communication.Client;
import qwirkle.Desktop.Communication.Messages.gameMessages.*;
import qwirkle.Desktop.Communication.Messages.message_abstract.Message;

/**
 * This Class holds all the Responses for the Messages sent to the Client by the Server.
 * The Messages that are being read are getting build into their respective classes and returned
 * for further use.
 * @author Lukas
 *
 */
public class MessagesFromServerCaseHandling {

	Parser parser = new Parser();
	
//##############################################################################################################################
												//ServerMessages
//##############################################################################################################################

	public void GameListResponse(Message msg) {
		String glmessage = parser.serialize(msg);
		GameListResponse glr = new GsonBuilder().create().fromJson(glmessage, GameListResponse.class);
		SelectGameController.setMatchList(glr.getGames());
	}
	
	public GameJoinAccepted GameJoinAccepted(Message msg) {
		String gjmessage = parser.serialize(msg);
		GameJoinAccepted gj = new GsonBuilder().create().fromJson(gjmessage, GameJoinAccepted.class);
		SelectGameController.playerJoinSuccess();
		return gj;
	}
	
	public SpectatorJoinAccepted SpectatorJoinAccepted(Message msg) {
		String sjmessage = parser.serialize(msg);
		SpectatorJoinAccepted ga = new GsonBuilder().create().fromJson(sjmessage, SpectatorJoinAccepted.class);
		SelectGameController.spectatorJoinSuccess(ga.getGame());
		return ga;
	}
	
	public MessageSignal MessageSignal(Message msg) {
		String msmessage = parser.serialize(msg);
		MessageSignal ms = new GsonBuilder().create().fromJson(msmessage, MessageSignal.class);
		String message = ms.getMessage();
		GameController.showPlayerMessage(message, ms.getClient());
		return ms;
	}
	
	public DisconnectSignal DisconnectSignal(Message msg) {
		String messageString = parser.serialize(msg);
		DisconnectSignal dcmessage = new GsonBuilder().create().fromJson(messageString, DisconnectSignal.class);
		return dcmessage;
	}
		
//##############################################################################################################################
												//Game Management
//##############################################################################################################################
	
	public void StartGame(Message msg){
		String messageString = parser.serialize(msg);
		StartGame sg = new GsonBuilder().create().fromJson(messageString,  StartGame.class);
		Configuration config = sg.getConfig();
		ArrayList<Client> players = sg.getClients();
		for (Client client : players) {
			GameController.addPlayer(client);
		}
		GameController.startGame();
//		GameController.startTurn(0);
//		Mainstarter.gameView.controlBar.startTimer();
	}
	
	public void AbortGame(Message msg) {
		System.out.println("Game has been aborted");
		MainMenuController.switchMainMenu();
	}
	
	public void EndGame(Message msg) {
		String messageString = parser.serialize(msg);
		StartGame sg = new GsonBuilder().create().fromJson(messageString,  StartGame.class);
	}
	
	public void PauseGame(Message msg) {
		String messageString = parser.serialize(msg);
		PauseGame pg = new GsonBuilder().create().fromJson(messageString,  PauseGame.class);
	}
	
	public void ResumeGame(Message msg) {
		String messageString = parser.serialize(msg);
		ResumeGame rg = new GsonBuilder().create().fromJson(messageString,  ResumeGame.class);
	}
	
	public void LeavingPlayer(Message msg) {
		String messageString = parser.serialize(msg);
		LeavingPlayer rg = new GsonBuilder().create().fromJson(messageString,  LeavingPlayer.class);
		Client leavingClient = rg.getClient();
		GameController.removePlayer(leavingClient.getClientId());
		// TODO IMPLEMENT
	}
	
	public void Winner(Message msg) {
		String messageString = parser.serialize(msg);
		Winner w = new GsonBuilder().create().fromJson(messageString,  Winner.class);
		Client winner = w.getClient();
		int winnerscore = w.getScore();
		HashMap<Client, Integer> scoreboard = w.getLeaderboard();
		
		// TODO IMPLEMENT
	}

//##############################################################################################################################
												//In-Game Management
//##############################################################################################################################
 
	// --- Field Management ---
	public void GameDataResponse(Message msg) {
		String jsonString = parser.serialize(msg);

		GameDataResponse gdr = new GsonBuilder().create().fromJson(jsonString, GameDataResponse.class);
		GameController.setBoard(gdr.getBoard());
		GameController.setCurrentPlayer(gdr.getCurrentClient());

		Collection<Tile> personalhand = gdr.getOwnTiles();
		
	}

	public void SendTiles(Message msg) {
		String messageString = parser.serialize(msg);
		SendTiles st = new GsonBuilder().create().fromJson(messageString,  SendTiles.class);
	}

	public void MoveValid(Message msg) {
		// TODO Auto-generated method stub
		
	}

	
	// --- Player Adapter Management ---
	public void CurrentPlayer(Message msg) {
		String messageString = parser.serialize(msg);
		CurrentPlayer cp = new GsonBuilder().create().fromJson(messageString,  CurrentPlayer.class);

		GameController.setCurrentPlayer(cp.getClient());
	}

	public void PlayerHandsResponse(Message msg) {
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.enableComplexMapKeySerialization().create();
		Type type = new TypeToken<PlayerHandsResponse>(){}.getType();
		String jsonString = gson.toJson(msg, type);
		PlayerHandsResponse phr = new GsonBuilder()
				.create().fromJson(jsonString, type);
		GameController.setPlayerHands(phr.getHands());
	}

	public void scoreResponse(Message msg) {
		
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.enableComplexMapKeySerialization().create();
		Type type = new TypeToken<ScoreResponse>(){}.getType();
		String jsonString = gson.toJson(msg, type);
		ScoreResponse scoreResponse = new GsonBuilder()
				.create().fromJson(jsonString, type);
		GameController.setScores(scoreResponse.getScores());
	}
	
	public void Update(Message msg) {
		String messageString = parser.serialize(msg);
		Update u = new GsonBuilder().create().fromJson(messageString, Update.class);
		
		
	}

	public TileSwapValid SwapValidationSignal(Message msg)
	{
		String messageString = parser.serialize(msg);
		TileSwapValid tsv = new GsonBuilder().create().fromJson(messageString,  TileSwapValid.class);
		return tsv;
	}
	
	public TileSwapResponse SwapResponseSignal(Message msg)
	{
		String messageString = parser.serialize(msg);
		TileSwapResponse tsr = new GsonBuilder().create().fromJson(messageString,  TileSwapResponse.class);
		return tsr;
	}

	
	// --- Control Bar Management ---

	public void TotalTimeResponse(Message msg) {
		// TODO Auto-generated method stub
		
	}

	public void TurnTimeLeftResponse(Message msg) {
		String tunrTimeLeftResponse = parser.serialize(msg);
		TurnTimeLeftResponse turnTime = new GsonBuilder().create().fromJson(tunrTimeLeftResponse, TurnTimeLeftResponse.class);
		GameController.updateTimeLeft(turnTime);
	}

	public void BagResponse(Message msg) {
		String bagResponseMsg = parser.serialize(msg);
		BagResponse bagResponse = new GsonBuilder().create().fromJson(bagResponseMsg, BagResponse.class);
		GameController.joinedGame.setBag(new Bag(bagResponse.getBag()));
		GameController.updateBag();
	}
	
}
